Activity feeder application Overview

afeeder allows user to feed his activities across multiple users.

Features:
1) User registration and login build on top of the Spring Security Framework
2) Activities are posted using AJAX jQuery
3) Activities are updated by every 60 seconds AJAX request
4) Activities are sorted by id descending
5) If user posts his activity and there was updates by other users, their (other users)
	activities will be automatically loaded by AJAX request.
6) Activities are shared across all users. Every user sees all activities of other users
7) Application supports 2 roles: ROLE_USER, ROLE_ADMIN
8) Registration via signup form will grant user only with ROLE_USER role
9) For now, user with ROLE_ADMIN can be created only via direct DB query
10) Initiall database script provides 2 users (username=admin, password=password) and (username=user1, password=password)
11) All passwords stored in DB are hashed with MD5 algorithm
12) After successful registration user user will be automatically logged in
13) Group Management section available only for ROLE_ADMIN user
14) Whole Group Management logic is implemented via AJAX requests (single page logic)
15) Whole Service Layer is covered by unit tests
16) Tiles Framework is used for page rendering 

****************************************************SOAP***************************************

SOAP Webservices implementation:
SOAP is implemented using JAX-WS Spring integration and Apache CXF.
The service could be found on http://localhost:{port}/afeeder/ws
WSDL - http://localhost:{port}/afeeder/ws?wsdl

There are 3 main operations in web services:
 - Retrieving list of all activities.
 - Searching activities by text using simple sql `like` pattern.
 - Posting new activity.

To gain access to web services user should generate token for himself in `My Account`
section of main application. Token expires 30 minutes after last usage.

Token should be put in SOAP message headers with name 'AuthToken'.
Web service authentication is implemented using interceptors, so auth process is separeted from
ws logic. This interceptor doesn't provide security check on GET requests, so WSDL could be loaded
without authentication.

There are 2 interceptors: AuthInterceptor is invoked on setup phase of handling SOAP message.
UpdateTokenUsageInterceptor is invoked after ws invocation. This interceptor updates token usage in DB.

WS client is Java console application which provide full access to WS logic. Please, invoke client
from command line with one argument (Auth Token should be passed).
Client java files were generated with `wsimport` utility.

****************************************************REST***************************************

REST Webservices implementation:
REST service is implemented using Spring MVC.
WADL for service could be found on http://localhost:{port}/afeeder/rest/wadl
WADL generation is implemented with using external library
Service url http://localhost:{port}/afeeder/rest*

There are 3 main operations in web services:
 - Retrieving list of all activities.
 - Searching activities by text using simple sql `like` pattern.
 - Posting new activity.

To gain access to web services user should generate token for himself in `My Account`
section of main application. Token expires 30 minutes after last usage.

Token should be put in http request headers with name 'AuthToken'.
Security token is covered in handler interceptor. The second interceptor UpdateTokenUsageInterceptor updates
last token usage in DB.

Every service request will be resulted in JSON response.

WS client is Java console application which provide full access to WS logic. Please, invoke client
from command line with one argument (Auth Token should be passed).

****************************************************SOLR****************************************
For now activity works via Solr engine. Entity schema is described in schema.xml which can be found
in `resources` folder of current app and should be put in `conf` folder of your solr installation.

Schema consists of 2 activity fields: `id` (stored, indexed) and `text` (only indexed). `Text` field 
is indexed only, this means that search result contains only `id` value and rest activity data should
be retrieved manually in service layer of app.

Activity search function is available only through SOAP and REST webservices. Web interface doesn't support
this for now.

Also, users with admin account could replicate all data from database to SOLR engine with one click.
See `SOLR management` in main menu.

This app is developed using maven jetty plugin. Plugin is configured to deploy SOLR application also.
But this expects some additional configuration in pom.xml

Go to the <plugins> -> <plugin> -> <groupId>org.mortbay.jetty</groupId> -> <configuration>
Change value <systemProperty> with `name solr.solr.name` to your SOLR distributive location.
And also change <context-handler> section to point to solw.war location (<war>) and <contextPath>.